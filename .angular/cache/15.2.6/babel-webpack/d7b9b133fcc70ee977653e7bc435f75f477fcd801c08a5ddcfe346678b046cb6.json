{"ast":null,"code":"import { catchError, map, of } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./product.service\";\nexport let ProductResolver = /*#__PURE__*/(() => {\n  class ProductResolver {\n    constructor(productService) {\n      this.productService = productService;\n    }\n    resolve(route, state) {\n      const id = route.paramMap.get('id');\n      if (isNaN(+id)) {\n        const message = `Product id was not a number :${id}`;\n        console.error(message);\n        return of({\n          product: null,\n          error: message\n        });\n      }\n      return this.productService.getProduct(+id).pipe(map(product => ({\n        product: product\n      })), catchError(error => {\n        const message = `Retrieval error:${error}`;\n        console.error(message);\n        return of({\n          product: null,\n          error: message\n        });\n      }));\n    }\n  }\n  ProductResolver.ɵfac = function ProductResolver_Factory(t) {\n    return new (t || ProductResolver)(i0.ɵɵinject(i1.ProductService));\n  };\n  ProductResolver.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductResolver,\n    factory: ProductResolver.ɵfac,\n    providedIn: 'root'\n  });\n  return ProductResolver;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}