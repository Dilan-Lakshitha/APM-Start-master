{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet ProductEditComponent = class ProductEditComponent {\n  constructor(productService, messageService, route, router) {\n    this.productService = productService;\n    this.messageService = messageService;\n    this.route = route;\n    this.router = router;\n    this.pageTitle = 'Product Edit';\n    this.dataIsValid = {};\n  }\n  ngOnInit() {\n    this.route.data.subscribe(data => {\n      const resolvedData = data['resolvedData'];\n      this.errorMessage = resolvedData.error;\n      this.onProductRetrieved(resolvedData.product);\n    });\n  }\n  // getProduct(id: number): void {\n  //   this.productService.getProduct(id).subscribe({\n  //     next: product => this.onProductRetrieved(product),\n  //     error: err => this.errorMessage = err\n  //   });\n  // }\n  onProductRetrieved(product) {\n    this.product = product;\n    if (!this.product) {\n      this.pageTitle = 'No product found';\n    } else {\n      if (this.product.id === 0) {\n        this.pageTitle = 'Add Product';\n      } else {\n        this.pageTitle = `Edit Product: ${this.product.productName}`;\n      }\n    }\n  }\n  deleteProduct() {\n    if (this.product.id === 0) {\n      // Don't delete, it was never saved.\n      this.onSaveComplete(`${this.product.productName} was deleted`);\n    } else {\n      if (confirm(`Really delete the product: ${this.product.productName}?`)) {\n        this.productService.deleteProduct(this.product.id).subscribe({\n          next: () => this.onSaveComplete(`${this.product.productName} was deleted`),\n          error: err => this.errorMessage = err\n        });\n      }\n    }\n  }\n  isValid(path) {\n    this.validate();\n    if (path) {\n      return this.dataIsValid[path];\n    }\n    return this.dataIsValid && Object.keys(this.dataIsValid).every(d => this.dataIsValid[d] === true);\n  }\n  saveProduct() {\n    if (true === true) {\n      if (this.product.id === 0) {\n        this.productService.createProduct(this.product).subscribe({\n          next: () => this.onSaveComplete(`The new ${this.product.productName} was saved`),\n          error: err => this.errorMessage = err\n        });\n      } else {\n        this.productService.updateProduct(this.product).subscribe({\n          next: () => this.onSaveComplete(`The updated ${this.product.productName} was saved`),\n          error: err => this.errorMessage = err\n        });\n      }\n    } else {\n      this.errorMessage = 'Please correct the validation errors.';\n    }\n  }\n  onSaveComplete(message) {\n    if (message) {\n      this.messageService.addMessage(message);\n    }\n    // Navigate back to the product list\n    this.router.navigate(['/products']);\n  }\n  validate() {\n    //clear the validation object\n    this.dataIsValid = {};\n    //'info' tab\n    if (this.product.productName && this.product.productName.length >= 3 && this.product.productCode) {\n      this.dataIsValid['info'] = true;\n    } else {\n      this.dataIsValid['info'] = false;\n    }\n    //'tags'tab\n    if (this.product.category && this.product.category.length >= 3) {\n      this.dataIsValid['tags'] = true;\n    } else {\n      this.dataIsValid['tags'] = false;\n    }\n  }\n};\nProductEditComponent = __decorate([Component({\n  templateUrl: './product-edit.component.html',\n  styleUrls: ['./product-edit.component.css']\n})], ProductEditComponent);\nexport { ProductEditComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}